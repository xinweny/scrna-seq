#### Packages ####
library(scran)
library(monocle3)
library(dplyr)
library(ggplot2)
library(glue)
#### Functions ####
#### Config ####
# Set working directory
setwd("~/mrc/project/scrna-seq")
# Parameters
inhibitors <- c("Luminespib", "Alvespimycin", "Tanespimycin")
#### Load data ####
cds <- readRDS("./processed/GSE139944/GSM4150378_sciPlex3_cds_all_cells.RDS")
col.data <- read.csv("./processed/GSE139944/GSM4150378_sciPlex3_pData.txt",
sep=" ", quote='"')
# Format sample names
col.data$cell_product_dose <- paste0(col.data$cell_type, "_",
col.data$product_name, "_",
col.data$dose)
#### Filtering ####
# Keep valid cells
col.data <- col.data[scan("./processed/GSE139944/sciPlex3_valid_cells.tsv", character(), quote=""), ]
# Filter cell metadata for selected inhibitors
filt.col.data <- rbind(col.data[col.data$vehicle, ],
col.data[grep(paste(inhibitors, sep="|", collapse="|"), col.data$product_name), ])
# Output frequency table of no. of cells per sample
cell.freq <- table(filt.col.data$cell_product_dose)
filt.col.data$cell_freq <- cell.freq[match(filt.col.data$cell_product_dose, rownames(cell.freq))]
# Filter out mouse genes and non-HSP90 targets
filt.counts <- counts(cds)[grep("ENSG", rownames(counts(cds))),
rownames(filt.col.data)]
filt.gene.data <- fData(cds)[grep("ENSG", rownames(fData(cds))), ]
rownames(filt.counts) <- filt.gene.data$gene_short_name
rownames(filt.gene.data) <- filt.gene.data$gene_short_name
#### Mean expression ####
# Parameters
cell.type <- "K562"
product <- "Luminespib"
d <- c(10, 100, 1000, 10000)
# Calculate average RPM for vehicle
vehicle.cells <- filt.col.data[filt.col.data$vehicle, ] %>%
filter(cell_type == cell.type, dose == 0) %>%
rownames()
vehicle.counts <- filt.counts[, vehicle.cells]
vehicle.rpm <- vehicle.counts / (colSums(vehicle.counts) / 10^6)
means.vehicle <- rowMeans(vehicle.rpm)
mean.exprs <- data.frame(mean_rpm=means.vehicle,
gene_short_name=names(means.vehicle),
sample=rep("Vehicle_0", length(means.vehicle)))
# Calculate average RPM for product across different doses
for (i in 1:length(d)) {
sample.cells <- filt.col.data[grep(product, filt.col.data$product_name), ] %>%
filter(cell_type == cell.type, dose == d[i]) %>%
rownames()
sample.counts <- filt.counts[, sample.cells]
sample.rpm <- sample.counts / (colSums(sample.counts) / 10^6)
means.sample <- rowMeans(sample.rpm)
mean.exprs <- rbind(mean.exprs,
data.frame(mean_rpm=means.sample,
gene_short_name=names(means.sample),
sample=rep(paste0(product, "_", d[i]), length(means.sample))))
}
mean.exprs <- mean.exprs[mean.exprs$mean_rpm > 0, ]
# Plot mean gene expression
png(glue("./processed/GSE139944/transcriptional_noise/sciPlex3_meanRPM_{cell.type}_{product}.png"),
width=3000, height=2000, res=300)
ggplot(mean.exprs, aes(x=sample, y=log10(mean_rpm + 1))) +
geom_violin() +
stat_summary(fun.data="mean_cl_boot", geom="errorbar", width=0.75, colour="red") +
xlab("") +
ylab("log10(Mean RPM + 1)") +
ggtitle(glue("Mean RPM of N={length(means.vehicle)} genes across {product} treatments
in {cell.type} cells"))
dev.off()
# Plot mean gene expression
png(glue("./processed/GSE139944/transcriptional_noise/sciPlex3_meanRPM_{cell.type}_{product}.png"),
width=3000, height=2000, res=300)
ggplot(mean.exprs, aes(x=sample, y=log10(mean_rpm + 1))) +
geom_violin() +
stat_summary(fun.y=mean, geom="errorbar", width=0.75, colour="red") +
xlab("") +
ylab("log10(Mean RPM + 1)") +
ggtitle(glue("Mean RPM of N={length(means.vehicle)} genes across {product} treatments
in {cell.type} cells"))
dev.off()
png(glue("./processed/GSE139944/transcriptional_noise/sciPlex3_meanRPM_{cell.type}_{product}.png"),
width=3000, height=2000, res=300)
ggplot(mean.exprs, aes(x=sample, y=log10(mean_rpm + 1))) +
geom_violin() +
stat_summary(fun=mean, geom="errorbar", width=0.75, colour="red") +
xlab("") +
ylab("log10(Mean RPM + 1)") +
ggtitle(glue("Mean RPM of N={length(means.vehicle)} genes across {product} treatments
in {cell.type} cells"))
dev.off()
png(glue("./processed/GSE139944/transcriptional_noise/sciPlex3_meanRPM_{cell.type}_{product}.png"),
width=3000, height=2000, res=300)
ggplot(mean.exprs, aes(x=sample, y=log10(mean_rpm + 1))) +
geom_violin() +
stat_summary(fun=mean, geom="errorbar",
aes(ymax = ..y.., ymin = ..y.., group = factor(sample)),
width=0.75, colour="red") +
xlab("") +
ylab("log10(Mean RPM + 1)") +
ggtitle(glue("Mean RPM of N={length(means.vehicle)} genes across {product} treatments
in {cell.type} cells"))
dev.off()
factor(sample)
mean.exprs$sample <- factor(mean.exprs$sample, levels=c("Vehicle_0",
paste0(product, "_10",),
paste0(product, "_100"),
paste0(product, "_1000"),
paste0(product, "_10000")))
# Plot mean gene expression
png(glue("./processed/GSE139944/transcriptional_noise/sciPlex3_meanRPM_{cell.type}_{product}.png"),
width=3000, height=2000, res=300)
ggplot(mean.exprs, aes(x=sample, y=log10(mean_rpm + 1))) +
geom_violin() +
stat_summary(fun=mean, geom="errorbar",
aes(ymax = ..y.., ymin = ..y.., group = factor(sample)),
width=0.75, colour="red") +
xlab("") +
ylab("log10(Mean RPM + 1)") +
ggtitle(glue("Mean RPM of N={length(means.vehicle)} genes across {product} treatments
in {cell.type} cells"))
dev.off()
mean.exprs$sample <- factor(mean.exprs$sample, levels=c("Vehicle_0",
paste0(product, "_10"),
paste0(product, "_100"),
paste0(product, "_1000"),
paste0(product, "_10000")))
# Plot mean gene expression
png(glue("./processed/GSE139944/transcriptional_noise/sciPlex3_meanRPM_{cell.type}_{product}.png"),
width=3000, height=2000, res=300)
ggplot(mean.exprs, aes(x=sample, y=log10(mean_rpm + 1))) +
geom_violin() +
stat_summary(fun=mean, geom="errorbar",
aes(ymax = ..y.., ymin = ..y.., group = factor(sample)),
width=0.75, colour="red") +
xlab("") +
ylab("log10(Mean RPM + 1)") +
ggtitle(glue("Mean RPM of N={length(means.vehicle)} genes across {product} treatments
in {cell.type} cells"))
dev.off()
# Parameters
cell.type <- "K562"
product <- "Luminespib"
d <- c(10, 100, 1000, 10000)
# Calculate average RPM for vehicle
vehicle.cells <- filt.col.data[filt.col.data$vehicle, ] %>%
filter(cell_type == cell.type, dose == 0) %>%
rownames()
vehicle.counts <- filt.counts[, vehicle.cells]
vehicle.rpm <- vehicle.counts / (colSums(vehicle.counts) / 10^6)
means.vehicle <- rowMeans(vehicle.rpm)
mean.exprs <- data.frame(mean_rpm=means.vehicle,
gene_short_name=names(means.vehicle),
sample=rep("Vehicle_0", length(means.vehicle)))
# Calculate average RPM for product across different doses
for (i in 1:length(d)) {
sample.cells <- filt.col.data[grep(product, filt.col.data$product_name), ] %>%
filter(cell_type == cell.type, dose == d[i]) %>%
rownames()
sample.counts <- filt.counts[, sample.cells]
sample.rpm <- sample.counts / (colSums(sample.counts) / 10^6)
means.sample <- rowMeans(sample.rpm)
mean.exprs <- rbind(mean.exprs,
data.frame(mean_rpm=means.sample,
gene_short_name=names(means.sample),
sample=rep(paste0(product, "_", d[i]), length(means.sample))))
}
mean.exprs$sample <- factor(mean.exprs$sample, levels=c("Vehicle_0",
paste0(product, "_10"),
paste0(product, "_100"),
paste0(product, "_1000"),
paste0(product, "_10000")))
mean.exprs %>% group_by(gene_short_name) %>% summarise(mean=mean(mean_rpm))
mean.exprs %>% group_by(gene_short_name) %>% summarise(mean=mean(mean_rpm)) %>% filter(mean > 0)
mean.exprs %>% group_by(gene_short_name) %>% summarise(mean=mean(mean_rpm)) %>% filter(mean > 0) %>% select(gene_short_name) %>% as.character()
mean.exprs %>% group_by(gene_short_name) %>% summarise(mean=mean(mean_rpm)) %>% filter(mean > 0) %>% .$gene_short_name
#### Mean expression ####
# Parameters
cell.type <- "K562"
product <- "Luminespib"
d <- c(10, 100, 1000, 10000)
# Calculate average RPM for vehicle
vehicle.cells <- filt.col.data[filt.col.data$vehicle, ] %>%
filter(cell_type == cell.type, dose == 0) %>%
rownames()
vehicle.counts <- filt.counts[, vehicle.cells]
vehicle.rpm <- vehicle.counts / (colSums(vehicle.counts) / 10^6)
means.vehicle <- rowMeans(vehicle.rpm)
mean.exprs <- data.frame(mean_rpm=means.vehicle,
gene_short_name=names(means.vehicle),
sample=rep("Vehicle_0", length(means.vehicle)))
# Calculate average RPM for product across different doses
for (i in 1:length(d)) {
sample.cells <- filt.col.data[grep(product, filt.col.data$product_name), ] %>%
filter(cell_type == cell.type, dose == d[i]) %>%
rownames()
sample.counts <- filt.counts[, sample.cells]
sample.rpm <- sample.counts / (colSums(sample.counts) / 10^6)
means.sample <- rowMeans(sample.rpm)
mean.exprs <- rbind(mean.exprs,
data.frame(mean_rpm=means.sample,
gene_short_name=names(means.sample),
sample=rep(paste0(product, "_", d[i]), length(means.sample))))
}
keep.genes <- mean.exprs %>%
group_by(gene_short_name) %>%
summarise(mean=mean(mean_rpm)) %>%
filter(mean > 0) %>%
.$gene_short_name
mean.exprs <- mean.exprs[mean.exprs$gene_short_name %in% keep.genes, ]
mean.exprs$sample <- factor(mean.exprs$sample, levels=c("Vehicle_0",
paste0(product, "_10"),
paste0(product, "_100"),
paste0(product, "_1000"),
paste0(product, "_10000")))
# Plot mean gene expression
png(glue("./processed/GSE139944/transcriptional_noise/sciPlex3_meanRPM_{cell.type}_{product}.png"),
width=3000, height=2000, res=300)
ggplot(mean.exprs, aes(x=sample, y=log10(mean_rpm + 1))) +
geom_violin() +
stat_summary(fun=mean, geom="errorbar",
aes(ymax = ..y.., ymin = ..y.., group = factor(sample)),
width=0.75, colour="red") +
xlab("") +
ylab("log10(Mean RPM + 1)") +
ggtitle(glue("Mean RPM of N={length(means.vehicle)} genes across {product} treatments
in {cell.type} cells"))
dev.off()
mean.exprs
unique(mean.exprs$gene_short_name)
length(unique(mean.exprs$gene_short_name))
