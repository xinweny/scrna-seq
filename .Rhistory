#### Packages ####
library(monocle3)
library(Matrix)
#### Config ####
setwd("~/mrc/project/scrna-seq")
#### Load data ####
cds <- readRDS("./processed/GSE139944/GSM4150377_sciPlex2_cds.RDS")
proteo.list <- read.csv("~/mrc/project/rna-seq/data/proteostasis_gene_list_16_03_21_NON_CORE0_CORE1.csv",
sep="\t")
# Extract relevant data from S4 Object
counts <- cds@assays$data$counts
col.data <- data.frame(cds@colData)
#### Packages ####
library(monocle3)
library(Matrix)
#### Config ####
setwd("~/mrc/project/scrna-seq")
#### Load data ####
cds <- readRDS("./processed/GSE139944/GSM4150377_sciPlex2_cds.RDS")
proteo.list <- read.csv("~/mrc/project/rna-seq/data/proteostasis_gene_list_16_03_21_NON_CORE0_CORE1.csv",
sep="\t")
# Extract relevant data from S4 Object
counts <- cds@assays$data$counts
col.data <- data.frame(cds@colData)
# Format gene names in count matrix
rownames(counts) <- gsub("\\.[0-9_A-Z]+$", "", rownames(counts))
#### Filtering ####
# Get list of CORE proteostasis genes
proteo.genes <- proteo.list[proteo.list$CORE == "CORE", c("Human_gene_ID")]
# Filter cell metadata for only HDAC inhibitors
filt.col.data <- col.data[grep("SAHA", col.data$top_oligo), ]
View(filt.col.data)
# Filter for genes and cells of interest
filt.counts <- counts[which(rownames(counts) %in% proteo.genes),
which(colnames(counts) %in% filt.col.data$Cell)]
View(filt.col.data)
dim(filt.counts)
filt.counts <- as.data.frame(as.matrix(counts[which(rownames(counts) %in% proteo.genes),
which(colnames(counts) %in% filt.col.data$Cell)]))
View(filt.counts)
t.filt.counts <- t(filt.counts)
View(t.filt.counts)
t.filt.counts$treatment <- filt.col.data$top_oligo
t.filt.counts <- as.data.frame(t(filt.counts))
t.filt.counts$treatment <- filt.col.data$top_oligo
View(t.filt.counts)
rm(list=ls())
#### Packages ####
library(monocle3)
library(Matrix)
#### Functions ####
aggregate_cols <- function(counts, col.data) {
t.counts <- as.data.frame(t(counts))
t.counts$treatment <- col.data$top_oligo
t.counts.agg <- aggregate(t.counts[1:length(t.counts) - 1], t.counts$treatment, mean)
return(t(t.counts.agg))
}
#### Config ####
setwd("~/mrc/project/scrna-seq")
#### Load data ####
cds <- readRDS("./processed/GSE139944/GSM4150377_sciPlex2_cds.RDS")
proteo.list <- read.csv("~/mrc/project/rna-seq/data/proteostasis_gene_list_16_03_21_NON_CORE0_CORE1.csv",
sep="\t")
# Extract relevant data from S4 Object
counts <- cds@assays$data$counts
col.data <- data.frame(cds@colData)
# Format gene names in count matrix
rownames(counts) <- gsub("\\.[0-9_A-Z]+$", "", rownames(counts))
#### Filtering ####
# Get list of CORE proteostasis genes
proteo.genes <- proteo.list[proteo.list$CORE == "CORE", c("Human_gene_ID")]
# Filter cell metadata for only HDAC inhibitors
filt.col.data <- col.data[grep("SAHA", col.data$top_oligo), ]
# Filter for genes and cells of interest
filt.counts <- as.data.frame(as.matrix(counts[which(rownames(counts) %in% proteo.genes),
which(colnames(counts) %in% filt.col.data$Cell)]))
# Collapse matrix by average expression per treatment per well
agg.filt.counts <- aggregate_cols(filt.counts, filt.col.data)
#### Functions ####
aggregate_cols <- function(counts, col.data) {
t.counts <- as.data.frame(t(counts))
t.counts$treatment <- col.data$top_oligo
t.counts.agg <- aggregate(t.counts[1:length(t.counts) - 1],
list(t.counts$treatment),
mean)
return(t(t.counts.agg))
}
# Collapse matrix by average expression per treatment per well
agg.filt.counts <- aggregate_cols(filt.counts, filt.col.data)
agg.filt.counts
#### Functions ####
aggregate_cols <- function(counts, col.data) {
t.counts <- as.data.frame(t(counts))
t.counts$treatment <- col.data$top_oligo
t.counts.agg <- aggregate(t.counts[1:length(t.counts) - 1],
list(t.counts$treatment),
mean)
return(data.matrix(t(t.counts.agg)))
}
agg.filt.counts <- aggregate_cols(filt.counts, filt.col.data)
agg.filt.counts
colnames(agg.filt.counts)
nrow(agg.filt.counts)
#### Functions ####
aggregate_cols <- function(counts, col.data) {
t.counts <- as.data.frame(t(counts))
t.counts$treatment <- col.data$top_oligo
t.counts.agg <- aggregate(t.counts[1:length(t.counts) - 1],
list(t.counts$treatment),
mean)
counts.agg <- t(t.counts.agg)
names(counts.agg) <- ad.matrix(counts.agg[1, ])
counts.agg <- counts.agg[-1, ]
return(counts.agg)
}
agg.filt.counts <- aggregate_cols(filt.counts, filt.col.data)
aggregate_cols <- function(counts, col.data) {
t.counts <- as.data.frame(t(counts))
t.counts$treatment <- col.data$top_oligo
t.counts.agg <- aggregate(t.counts[1:length(t.counts) - 1],
list(t.counts$treatment),
mean)
counts.agg <- t(t.counts.agg)
names(counts.agg) <- as.matrix(counts.agg[1, ])
counts.agg <- counts.agg[-1, ]
return(counts.agg)
}
agg.filt.counts <- aggregate_cols(filt.counts, filt.col.data)
agg.filt.matrix
agg.filt.counts
colnames(agg.filt.counts)
aggregate_cols <- function(counts, col.data) {
t.counts <- as.data.frame(t(counts))
t.counts$treatment <- col.data$top_oligo
t.counts.agg <- aggregate(t.counts[1:length(t.counts) - 1],
list(t.counts$treatment),
mean)
counts.agg <- t(t.counts.agg)
return(counts.agg)
}
agg.filt.counts <- aggregate_cols(filt.counts, filt.col.data)
agg.filt.counts
aggregate_cols <- function(counts, col.data) {
t.counts <- as.data.frame(t(counts))
t.counts$treatment <- col.data$top_oligo
t.counts.agg <- aggregate(t.counts[1:length(t.counts) - 1],
list(t.counts$treatment),
mean)
counts.agg <- t(t.counts.agg)
colnames(counts.agg) <- counts.agg[1, ]
counts.agg <- data.matrix(counts.agg[-1, ])
return(counts.agg)
}
agg.filt.counts <- aggregate_cols(filt.counts, filt.col.data)
agg.filt.counts
nrow(agg.filt.counts)
dim(agg.filt.counts)
filt.counts
# Filter for genes and cells of interest
filt.counts <- as.data.frame(as.matrix(counts[which(rownames(counts) %in% proteo.genes),
which(colnames(counts) %in% filt.col.data$Cell)]))
filt.counts
View(filt.counts)
class(agg.filt.counts)
as.numeric(agg.filt.counts)
aggregate_cols <- function(counts, col.data) {
t.counts <- as.data.frame(t(counts))
t.counts$treatment <- col.data$top_oligo
t.counts.agg <- aggregate(t.counts[1:length(t.counts) - 1],
list(t.counts$treatment),
mean)
counts.agg <- t(t.counts.agg)
colnames(counts.agg) <- counts.agg[1, ]
counts.agg <- data.matrix(as.data.frame(counts.agg[-1, ]))
return(counts.agg)
}
agg.filt.counts <- aggregate_cols(filt.counts, filt.col.data)
agg.filt.counts
aggregate_cols <- function(counts, col.data) {
t.counts <- as.data.frame(t(counts))
t.counts$treatment <- col.data$top_oligo
t.counts.agg <- aggregate(t.counts[1:length(t.counts) - 1],
list(t.counts$treatment),
mean)
counts.agg <- t(t.counts.agg)
colnames(counts.agg) <- counts.agg[1, ]
counts.agg <- as.data.frame(counts.agg[-1, ])
return(counts.agg)
}
# Collapse matrix by average expression per treatment per well
agg.filt.counts <- aggregate_cols(filt.counts, filt.col.data)
agg.filt.counts
aggregate_cols <- function(counts, col.data) {
t.counts <- as.data.frame(t(counts))
t.counts$treatment <- col.data$top_oligo
t.counts.agg <- aggregate(t.counts[1:length(t.counts) - 1],
list(t.counts$treatment),
mean)
counts.agg <- t(t.counts.agg)
colnames(counts.agg) <- counts.agg[1, ]
counts.agg <- as.matrix(as.data.frame(counts.agg[-1, ]))
return(counts.agg)
}
agg.filt.counts <- aggregate_cols(filt.counts, filt.col.data)
agg.filt.counts
class(agg.filt.counts[1,1])
#### Functions ####
aggregate_cols <- function(counts, col.data) {
t.counts <- as.data.frame(t(counts))
t.counts$treatment <- col.data$top_oligo
t.counts.agg <- aggregate(t.counts[1:length(t.counts) - 1],
list(t.counts$treatment),
mean)
counts.agg <- t(t.counts.agg)
colnames(counts.agg) <- counts.agg[1, ]
counts.agg <- as.data.frame(counts.agg[-1, ])
return(counts.agg)
}
agg.filt.counts <- aggregate_cols(filt.counts, filt.col.data)
aggregate_cols <- function(counts, col.data) {
t.counts <- as.data.frame(t(counts))
t.counts$treatment <- col.data$top_oligo
t.counts.agg <- aggregate(t.counts[1:length(t.counts) - 1],
list(t.counts$treatment),
mean)
counts.agg <- t(t.counts.agg)
colnames(counts.agg) <- counts.agg[1, ]
counts.agg <- as.data.frame(counts.agg[-1, ])
return(as.matrix(sapply(counts.agg, as.numeric)))
}
agg.filt.counts <- aggregate_cols(filt.counts, filt.col.data)
agg.filt.counts
#### Functions ####
aggregate_cols <- function(counts, col.data) {
t.counts <- as.data.frame(t(counts))
t.counts$treatment <- col.data$top_oligo
t.counts.agg <- aggregate(t.counts[1:length(t.counts) - 1],
list(t.counts$treatment),
mean)
counts.agg <- t(t.counts.agg)
colnames(counts.agg) <- counts.agg[1, ]
rownames(counts.agg) <- counts.agg[, 1]
counts.agg <- counts.agg[-1, -1]
return(counts.agg)
# as.matrix(sapply(counts.agg, as.numeric))
}
agg.filt.counts <- aggregate_cols(filt.counts, filt.col.data)
agg.filt.counts
aggregate_cols <- function(counts, col.data) {
t.counts <- as.data.frame(t(counts))
t.counts$treatment <- col.data$top_oligo
t.counts.agg <- aggregate(t.counts[1:length(t.counts) - 1],
list(t.counts$treatment),
mean)
counts.agg <- t(t.counts.agg)
colnames(counts.agg) <- counts.agg[1, ]
counts.agg <- counts.agg[-1, ]
return(counts.agg)
# as.matrix(sapply(counts.agg, as.numeric))
}
agg.filt.counts <- aggregate_cols(filt.counts, filt.col.data)
agg.filt.counts
rownames(agg.filt.counts)
aggregate_cols <- function(counts, col.data) {
t.counts <- as.data.frame(t(counts))
t.counts$treatment <- col.data$top_oligo
t.counts.agg <- aggregate(t.counts[1:length(t.counts) - 1],
list(t.counts$treatment),
mean)
counts.agg <- t(t.counts.agg)
colnames(counts.agg) <- counts.agg[1, ]
counts.agg <- counts.agg[-1, ]
counts.agg <- as.matrix(sapply(counts.agg, as.numeric),
rownames=rownames(counts.agg))
return(counts.agg)
#
}
agg.filt.counts <- aggregate_cols(filt.counts, filt.col.data)
agg.filt.counts
aggregate_cols <- function(counts, col.data) {
t.counts <- as.data.frame(t(counts))
t.counts$treatment <- col.data$top_oligo
t.counts.agg <- aggregate(t.counts[1:length(t.counts) - 1],
list(t.counts$treatment),
mean)
counts.agg <- t(t.counts.agg)
colnames(counts.agg) <- counts.agg[1, ]
counts.agg <- as.data.frame(counts.agg[-1, ])
counts.agg <- as.matrix(sapply(counts.agg, as.numeric),
rownames=rownames(counts.agg))
return(counts.agg)
#
}
agg.filt.counts <- aggregate_cols(filt.counts, filt.col.data)
agg.filt.counts
rownames(agg.filt.counts)
aggregate_cols <- function(counts, col.data) {
t.counts <- as.data.frame(t(counts))
t.counts$treatment <- col.data$top_oligo
t.counts.agg <- aggregate(t.counts[1:length(t.counts) - 1],
list(t.counts$treatment),
mean)
counts.agg <- t(t.counts.agg)
colnames(counts.agg) <- counts.agg[1, ]
counts.agg <- as.data.frame(counts.agg[-1, ])
counts.agg.mat <- as.matrix(sapply(counts.agg, as.numeric))
rownames(counts.agg.mat) <- rownames(counts.agg)
return(counts.agg.mat)
#
}
agg.filt.counts <- aggregate_cols(filt.counts, filt.col.data)
agg.filt.counts
dim(agg.filt.counts)
length(proteo.genes)
