#### DM and correlation analysis ####
dm.corr.list <- list()
# Parameters
cell.type <- "K562"
product <- "Luminespib"
d <- c(10, 100, 1000, 10000)
top.n <- 500
vehicle.cells <- filt.col.data[filt.col.data$vehicle, ] %>%
filter(cell_type == cell.type) %>%
rownames()
vehicle.counts <- filt.counts[, vehicle.cells]
# RPM normalisation
vehicle.rpm <- vehicle.counts / (colSums(vehicle.counts) / 10^6)
vehicle.rpm <- vehicle.rpm[rowMeans(vehicle.rpm) > 10, ]
# Get distance-to-median metric
dm.corr.list['Vehicle_0_topdm'] <- names(dm_analysis(vehicle.counts, top.n))
# Get correlation metric
dm.corr.list['Vehicle_0_dcorr'] <- correlation_analysis(vehicle.rpm,
dm.corr.list['Vehicle_0_topdm'])
# Repeat for product
for (i in 1:length(d)) {
sample.cells <- filt.col.data[grep(product, filt.col.data$product_name), ] %>%
filter(cell_type == cell.type, dose == d[i]) %>%
rownames()
sample.counts <- filt.counts[, sample.cells]
# RPM normalisation
sample.rpm <- sample.counts / (colSums(sample.counts) / 10^6)
sample.rpm <- sample.rpm[rowMeans(sample.rpm) > 10, ]
# Get distance-to-median metric
dm.corr.list[paste0(product, "_", d[i], "_topdm")] <- names(dm_analysis(sample.counts, top.n))
# Get correlation metric
dm.corr.list[paste0(product, "_", d[i], "_dcorr")] <- correlation_analysis(sample.rpm,
dm.corr.list[paste0(product, "_", d[i], "_topdm")])
}
dm.corr.list
names(dm_analysis(vehicle.counts, top.n))
correlation_analysis <- function(rpm, top.n.dm) {
corr <- rcorr(t(as.matrix(rpm[names(top.n.dm), ])),
type="spearman")
return(sqrt((1 - upperTriangle(corr$r)) / 2))
}
dm.corr.list <- list()
#### DM and correlation analysis ####
dm.corr.list <- list()
# Parameters
cell.type <- "K562"
product <- "Luminespib"
d <- c(10, 100, 1000, 10000)
top.n <- 500
vehicle.cells <- filt.col.data[filt.col.data$vehicle, ] %>%
filter(cell_type == cell.type) %>%
rownames()
vehicle.counts <- filt.counts[, vehicle.cells]
# RPM normalisation
vehicle.rpm <- vehicle.counts / (colSums(vehicle.counts) / 10^6)
vehicle.rpm <- vehicle.rpm[rowMeans(vehicle.rpm) > 10, ]
# Get distance-to-median metric
dm.corr.list[["Vehicle_topdm"]] <- dm_analysis(vehicle.counts, top.n)
dm.corr.list
dm.corr.list$Vehicle_topdm
# Get correlation metric
dm.corr.list[["Vehicle_dcorr"]] <- correlation_analysis(vehicle.rpm,
dm.corr.list[["Vehicle_topdm"]])
#### Functions ####
dm_analysis <- function(counts, top.n) {
means <- rowMeans(counts)
cv2 <- apply(counts, 1, var) / (means ^ 2)
dm <- DM(means, cv2)
dm <- dm[!(is.na(dm))]
dm <- dm[order(abs(dm), decreasing=TRUE)]
return(head(dm, top.n))
}
correlation_analysis <- function(rpm, top.n.dm) {
corr <- rcorr(t(as.matrix(rpm[names(top.n.dm), ])),
type="spearman")
return(sqrt((1 - upperTriangle(corr$r)) / 2))
}
# Get correlation metric
dm.corr.list[["Vehicle_dcorr"]] <- correlation_analysis(vehicle.rpm,
dm.corr.list[["Vehicle_topdm"]])
dm.corr.list[["Vehicle_topdm"]]
names(dm.corr.list[["Vehicle_topdm"]])
vehicle.rpm
dm.corr.list <- list()
# Parameters
cell.type <- "K562"
product <- "Luminespib"
d <- c(10, 100, 1000, 10000)
top.n <- 500
vehicle.cells <- filt.col.data[filt.col.data$vehicle, ] %>%
filter(cell_type == cell.type) %>%
rownames()
vehicle.counts <- filt.counts[, vehicle.cells]
# RPM normalisation
vehicle.rpm <- vehicle.counts / (colSums(vehicle.counts) / 10^6)
vehicle.rpm <- vehicle.rpm[rowMeans(vehicle.rpm) > 10, ]
# Get distance-to-median metric
dm.corr.list[["Vehicle_topdm"]] <- dm_analysis(vehicle.counts, top.n)
# Get correlation metric
dm.corr.list[["Vehicle_dcorr"]] <- correlation_analysis(vehicle.rpm,
dm.corr.list[["Vehicle_topdm"]])
vehicle.rpm[names(dm.corr.list[['Vehicle_topdm']]), ]
vehicle.rpm[names(dm.corr.list[['Vehicle_topdm']]), ]
names(dm.corr.list[['Vehicle_topdm']])
correlation_analysis <- function(counts, top.n.dm) {
corr <- rcorr(t(as.matrix(counts[names(top.n.dm), ])),
type="spearman")
return(sqrt((1 - upperTriangle(corr$r)) / 2))
}
#### DM and correlation analysis ####
dm.corr.list <- list()
# Parameters
cell.type <- "K562"
product <- "Luminespib"
d <- c(10, 100, 1000, 10000)
top.n <- 500
vehicle.cells <- filt.col.data[filt.col.data$vehicle, ] %>%
filter(cell_type == cell.type) %>%
rownames()
vehicle.counts <- filt.counts[, vehicle.cells]
# RPM normalisation
vehicle.rpm <- vehicle.counts / (colSums(vehicle.counts) / 10^6)
vehicle.rpm <- vehicle.rpm[rowMeans(vehicle.rpm) > 10, ]
# Get distance-to-median metric
dm.corr.list[["Vehicle_topdm"]] <- dm_analysis(vehicle.rpm, top.n)
# Get correlation metric
dm.corr.list[["Vehicle_dcorr"]] <- correlation_analysis(vehicle.rpm,
dm.corr.list[["Vehicle_topdm"]])
#### DM and correlation analysis ####
dm.corr.list <- list()
# Parameters
cell.type <- "K562"
product <- "Luminespib"
d <- c(10, 100, 1000, 10000)
top.n <- 500
vehicle.cells <- filt.col.data[filt.col.data$vehicle, ] %>%
filter(cell_type == cell.type) %>%
rownames()
vehicle.counts <- filt.counts[, vehicle.cells]
# RPM normalisation
vehicle.rpm <- vehicle.counts / (colSums(vehicle.counts) / 10^6)
vehicle.rpm <- vehicle.rpm[rowMeans(vehicle.rpm) > 10, ]
# Get distance-to-median metric
dm.corr.list[["Vehicle_0_topdm"]] <- dm_analysis(vehicle.rpm, top.n)
# Get correlation metric
dm.corr.list[["Vehicle_0_dcorr"]] <- correlation_analysis(vehicle.rpm,
dm.corr.list[["Vehicle_topdm"]])
#### DM and correlation analysis ####
dm.corr.list <- list()
# Parameters
cell.type <- "K562"
product <- "Luminespib"
d <- c(10, 100, 1000, 10000)
top.n <- 500
vehicle.cells <- filt.col.data[filt.col.data$vehicle, ] %>%
filter(cell_type == cell.type) %>%
rownames()
vehicle.counts <- filt.counts[, vehicle.cells]
# RPM normalisation
vehicle.rpm <- vehicle.counts / (colSums(vehicle.counts) / 10^6)
vehicle.rpm <- vehicle.rpm[rowMeans(vehicle.rpm) > 10, ]
# Get distance-to-median metric
dm.corr.list[["Vehicle_0_topdm"]] <- dm_analysis(vehicle.rpm, top.n)
# Get correlation metric
dm.corr.list[["Vehicle_0_dcorr"]] <- correlation_analysis(vehicle.rpm,
dm.corr.list[["Vehicle_0_topdm"]])
dm.corr.list
dm.corr.list$Vehicle_0_dcorr
correlation_analysis(vehicle.rpm,
dm.corr.list[["Vehicle_0_topdm"]])
rcorr(t(as.matrix(vehicle.rpm[names(dm.corr.list[["Vehicle_0_topdm"]]), ])),
type="spearman")
dcorr <- function(corr) {
sqrt((1 - upperTriangle(corr$r)) / 2)
}
#### DM and correlation analysis ####
dm.corr.list <- list()
# Parameters
cell.type <- "K562"
product <- "Luminespib"
d <- c(10, 100, 1000, 10000)
top.n <- 500
vehicle.cells <- filt.col.data[filt.col.data$vehicle, ] %>%
filter(cell_type == cell.type) %>%
rownames()
vehicle.counts <- filt.counts[, vehicle.cells]
# RPM normalisation
vehicle.rpm <- vehicle.counts / (colSums(vehicle.counts) / 10^6)
vehicle.rpm <- vehicle.rpm[rowMeans(vehicle.rpm) > 10, ]
# Get distance-to-median metric
dm.corr.list[["Vehicle_0_topdm"]] <- dm_analysis(vehicle.rpm, top.n)
# Get correlation metric
dm.corr.list[["Vehicle_0_corr"]] <- correlation_analysis(vehicle.rpm,
dm.corr.list[["Vehicle_0_topdm"]])
# Repeat for product
for (i in 1:length(d)) {
sample.cells <- filt.col.data[grep(product, filt.col.data$product_name), ] %>%
filter(cell_type == cell.type, dose == d[i]) %>%
rownames()
sample.counts <- filt.counts[, sample.cells]
# RPM normalisation
sample.rpm <- sample.counts / (colSums(sample.counts) / 10^6)
sample.rpm <- sample.rpm[rowMeans(sample.rpm) > 10, ]
# Get distance-to-median metric
dm.corr.list[paste0(product, "_", d[i], "_topdm")] <- dm_analysis(sample.rpm, top.n)
# Get correlation metric
dm.corr.list[paste0(product, "_", d[i], "_corr")] <- correlation_analysis(sample.rpm,
dm.corr.list[paste0(product, "_", d[i], "_topdm")])
}
# Plot violin plot
vioplot(dcorr(dm.corr.list[["Vehicle_0_corr"]]),
dcorr(dm.corr.list[[paste0(product, "_10_corr")]]),
dcorr(dm.corr.list[[paste0(product, "_100_corr")]]),
dcorr(dm.corr.list[[paste0(product, "_1000_corr")]]),
dcorr(dm.corr.list[[paste0(product, "_10000_corr")]]),
names=c("Vehicle_0",
paste0(product, "_10"),
paste0(product, "_100"),
paste0(product, "_1000"),
paste0(product, "_10000")),
col="orange")
title(main=glue("Transcriptional heterogeneity in {cell.type} cells"),
ylab="Pairwise distance measure")
dm.corr.list
#### DM and correlation analysis ####
dm.corr.list <- list()
# Parameters
cell.type <- "K562"
product <- "Luminespib"
d <- c(10, 100, 1000, 10000)
top.n <- 500
vehicle.cells <- filt.col.data[filt.col.data$vehicle, ] %>%
filter(cell_type == cell.type) %>%
rownames()
vehicle.counts <- filt.counts[, vehicle.cells]
# RPM normalisation
vehicle.rpm <- vehicle.counts / (colSums(vehicle.counts) / 10^6)
vehicle.rpm <- vehicle.rpm[rowMeans(vehicle.rpm) > 10, ]
# Get distance-to-median metric
dm.corr.list[["Vehicle_0_topdm"]] <- dm_analysis(vehicle.rpm, top.n)
# Get correlation metric
dm.corr.list[["Vehicle_0_corr"]] <- correlation_analysis(vehicle.rpm,
dm.corr.list[["Vehicle_0_topdm"]])
# Repeat for product
for (i in 1:length(d)) {
sample.cells <- filt.col.data[grep(product, filt.col.data$product_name), ] %>%
filter(cell_type == cell.type, dose == d[i]) %>%
rownames()
sample.counts <- filt.counts[, sample.cells]
# RPM normalisation
sample.rpm <- sample.counts / (colSums(sample.counts) / 10^6)
sample.rpm <- sample.rpm[rowMeans(sample.rpm) > 10, ]
# Get distance-to-median metric
dm.corr.list[[paste0(product, "_", d[i], "_topdm")]] <- dm_analysis(sample.rpm, top.n)
# Get correlation metric
dm.corr.list[[paste0(product, "_", d[i], "_corr")]] <- correlation_analysis(sample.rpm,
dm.corr.list[[paste0(product, "_", d[i], "_topdm")]])
}
dm.corr.list
correlation_analysis <- function(counts, top.n.dm) {
return(rcorr(t(as.matrix(counts[names(top.n.dm), ])),
type="spearman"))
}
#### DM and correlation analysis ####
dm.corr.list <- list()
# Parameters
cell.type <- "K562"
product <- "Luminespib"
d <- c(10, 100, 1000, 10000)
top.n <- 500
vehicle.cells <- filt.col.data[filt.col.data$vehicle, ] %>%
filter(cell_type == cell.type) %>%
rownames()
vehicle.counts <- filt.counts[, vehicle.cells]
# RPM normalisation
vehicle.rpm <- vehicle.counts / (colSums(vehicle.counts) / 10^6)
vehicle.rpm <- vehicle.rpm[rowMeans(vehicle.rpm) > 10, ]
# Get distance-to-median metric
dm.corr.list[["Vehicle_0_topdm"]] <- dm_analysis(vehicle.rpm, top.n)
# Get correlation metric
dm.corr.list[["Vehicle_0_corr"]] <- correlation_analysis(vehicle.rpm,
dm.corr.list[["Vehicle_0_topdm"]])
# Repeat for product
for (i in 1:length(d)) {
sample.cells <- filt.col.data[grep(product, filt.col.data$product_name), ] %>%
filter(cell_type == cell.type, dose == d[i]) %>%
rownames()
sample.counts <- filt.counts[, sample.cells]
# RPM normalisation
sample.rpm <- sample.counts / (colSums(sample.counts) / 10^6)
sample.rpm <- sample.rpm[rowMeans(sample.rpm) > 10, ]
# Get distance-to-median metric
dm.corr.list[[paste0(product, "_", d[i], "_topdm")]] <- dm_analysis(sample.rpm, top.n)
# Get correlation metric
dm.corr.list[[paste0(product, "_", d[i], "_corr")]] <- correlation_analysis(sample.rpm,
dm.corr.list[[paste0(product, "_", d[i], "_topdm")]])
}
dm.corr.list
# Plot violin plot
vioplot(dcorr(dm.corr.list[["Vehicle_0_corr"]]),
dcorr(dm.corr.list[[paste0(product, "_10_corr")]]),
dcorr(dm.corr.list[[paste0(product, "_100_corr")]]),
dcorr(dm.corr.list[[paste0(product, "_1000_corr")]]),
dcorr(dm.corr.list[[paste0(product, "_10000_corr")]]),
names=c("Vehicle_0",
paste0(product, "_10"),
paste0(product, "_100"),
paste0(product, "_1000"),
paste0(product, "_10000")),
col="orange")
title(main=glue("Transcriptional heterogeneity in {cell.type} cells"),
ylab="Pairwise distance measure")
# Plot violin plot
vioplot(dcorr(dm.corr.list[["Vehicle_0_corr"]]),
dcorr(dm.corr.list[[paste0(product, "_10_corr")]]),
dcorr(dm.corr.list[[paste0(product, "_100_corr")]]),
dcorr(dm.corr.list[[paste0(product, "_1000_corr")]]),
dcorr(dm.corr.list[[paste0(product, "_10000_corr")]]),
names=c("Vehicle_0",
paste0(product, "_10"),
paste0(product, "_100"),
paste0(product, "_1000"),
paste0(product, "_10000")),
col="orange",
ylim=c(0, 1))
title(main=glue("Transcriptional heterogeneity in {cell.type} cells"),
ylab="Pairwise distance measure")
vioplot(dcorr(dm.corr.list[["Vehicle_0_corr"]]),
dcorr(dm.corr.list[[paste0(product, "_10_corr")]]),
dcorr(dm.corr.list[[paste0(product, "_100_corr")]]),
dcorr(dm.corr.list[[paste0(product, "_1000_corr")]]),
dcorr(dm.corr.list[[paste0(product, "_10000_corr")]]),
names=c("Vehicle_0",
paste0(product, "_10"),
paste0(product, "_100"),
paste0(product, "_1000"),
paste0(product, "_10000")),
col="orange")
title(main=glue("Transcriptional heterogeneity in {cell.type} cells"),
ylab="Pairwise distance measure")
png(glue("./processed/GSE139944/transcriptional_noise/sciPlex3_DM_{cell.type}_{product}.png"),
width=3000, height=2000, res=300)
vioplot(dcorr(dm.corr.list[["Vehicle_0_corr"]]),
dcorr(dm.corr.list[[paste0(product, "_10_corr")]]),
dcorr(dm.corr.list[[paste0(product, "_100_corr")]]),
dcorr(dm.corr.list[[paste0(product, "_1000_corr")]]),
dcorr(dm.corr.list[[paste0(product, "_10000_corr")]]),
names=c("Vehicle_0",
paste0(product, "_10"),
paste0(product, "_100"),
paste0(product, "_1000"),
paste0(product, "_10000")),
col="orange")
title(main=glue("{cell.type} transcriptional heterogeneity in {product} treatments"),
ylab="Pairwise distance measure")
dev.off()
#### DM and correlation analysis ####
dm.corr.list <- list()
# Parameters
cell.type <- "K562"
product <- "Luminespib"
d <- c(10, 100, 1000, 10000)
top.n <- 100
vehicle.cells <- filt.col.data[filt.col.data$vehicle, ] %>%
filter(cell_type == cell.type) %>%
rownames()
vehicle.counts <- filt.counts[, vehicle.cells]
# RPM normalisation
vehicle.rpm <- vehicle.counts / (colSums(vehicle.counts) / 10^6)
vehicle.rpm <- vehicle.rpm[rowMeans(vehicle.rpm) > 10, ]
# Get distance-to-median metric
dm.corr.list[["Vehicle_0_topdm"]] <- dm_analysis(vehicle.rpm, top.n)
# Get correlation metric
dm.corr.list[["Vehicle_0_corr"]] <- correlation_analysis(vehicle.rpm,
dm.corr.list[["Vehicle_0_topdm"]])
# Repeat for product
for (i in 1:length(d)) {
sample.cells <- filt.col.data[grep(product, filt.col.data$product_name), ] %>%
filter(cell_type == cell.type, dose == d[i]) %>%
rownames()
sample.counts <- filt.counts[, sample.cells]
# RPM normalisation
sample.rpm <- sample.counts / (colSums(sample.counts) / 10^6)
sample.rpm <- sample.rpm[rowMeans(sample.rpm) > 10, ]
# Get distance-to-median metric
dm.corr.list[[paste0(product, "_", d[i], "_topdm")]] <- dm_analysis(sample.rpm, top.n)
# Get correlation metric
dm.corr.list[[paste0(product, "_", d[i], "_corr")]] <- correlation_analysis(sample.rpm,
dm.corr.list[[paste0(product, "_", d[i], "_topdm")]])
}
# Plot violin plot
png(glue("./processed/GSE139944/transcriptional_noise/sciPlex3_DM_{cell.type}_{product}.png"),
width=3000, height=2000, res=300)
vioplot(dcorr(dm.corr.list[["Vehicle_0_corr"]]),
dcorr(dm.corr.list[[paste0(product, "_10_corr")]]),
dcorr(dm.corr.list[[paste0(product, "_100_corr")]]),
dcorr(dm.corr.list[[paste0(product, "_1000_corr")]]),
dcorr(dm.corr.list[[paste0(product, "_10000_corr")]]),
names=c("Vehicle_0",
paste0(product, "_10"),
paste0(product, "_100"),
paste0(product, "_1000"),
paste0(product, "_10000")),
col="orange")
title(main=glue("{cell.type} transcriptional heterogeneity in {product} treatments
for the top N={top.n} highly variable genes"),
ylab="Pairwise distance measure")
dev.off()
#### DM and correlation analysis ####
dm.corr.list <- list()
# Parameters
cell.type <- "K562"
product <- "Luminespib"
d <- c(10, 100, 1000, 10000)
top.n <- 1000
vehicle.cells <- filt.col.data[filt.col.data$vehicle, ] %>%
filter(cell_type == cell.type) %>%
rownames()
vehicle.counts <- filt.counts[, vehicle.cells]
# RPM normalisation
vehicle.rpm <- vehicle.counts / (colSums(vehicle.counts) / 10^6)
vehicle.rpm <- vehicle.rpm[rowMeans(vehicle.rpm) > 10, ]
# Get distance-to-median metric
dm.corr.list[["Vehicle_0_topdm"]] <- dm_analysis(vehicle.rpm, top.n)
# Get correlation metric
dm.corr.list[["Vehicle_0_corr"]] <- correlation_analysis(vehicle.rpm,
dm.corr.list[["Vehicle_0_topdm"]])
# Repeat for product
for (i in 1:length(d)) {
sample.cells <- filt.col.data[grep(product, filt.col.data$product_name), ] %>%
filter(cell_type == cell.type, dose == d[i]) %>%
rownames()
sample.counts <- filt.counts[, sample.cells]
# RPM normalisation
sample.rpm <- sample.counts / (colSums(sample.counts) / 10^6)
sample.rpm <- sample.rpm[rowMeans(sample.rpm) > 10, ]
# Get distance-to-median metric
dm.corr.list[[paste0(product, "_", d[i], "_topdm")]] <- dm_analysis(sample.rpm, top.n)
# Get correlation metric
dm.corr.list[[paste0(product, "_", d[i], "_corr")]] <- correlation_analysis(sample.rpm,
dm.corr.list[[paste0(product, "_", d[i], "_topdm")]])
}
# Plot violin plot
png(glue("./processed/GSE139944/transcriptional_noise/sciPlex3_DM_{cell.type}_{product}.png"),
width=3000, height=2000, res=300)
vioplot(dcorr(dm.corr.list[["Vehicle_0_corr"]]),
dcorr(dm.corr.list[[paste0(product, "_10_corr")]]),
dcorr(dm.corr.list[[paste0(product, "_100_corr")]]),
dcorr(dm.corr.list[[paste0(product, "_1000_corr")]]),
dcorr(dm.corr.list[[paste0(product, "_10000_corr")]]),
names=c("Vehicle_0",
paste0(product, "_10"),
paste0(product, "_100"),
paste0(product, "_1000"),
paste0(product, "_10000")),
col="orange")
title(main=glue("{cell.type} transcriptional heterogeneity in {product} treatments
for the top N={top.n} highly variable genes"),
ylab="Pairwise distance measure")
dev.off()
#### DM and correlation analysis ####
dm.corr.list <- list()
# Parameters
cell.type <- "K562"
product <- "Luminespib"
d <- c(10, 100, 1000, 10000)
top.n <- 500
vehicle.cells <- filt.col.data[filt.col.data$vehicle, ] %>%
filter(cell_type == cell.type) %>%
rownames()
vehicle.counts <- filt.counts[, vehicle.cells]
# RPM normalisation
vehicle.rpm <- vehicle.counts / (colSums(vehicle.counts) / 10^6)
vehicle.rpm <- vehicle.rpm[rowMeans(vehicle.rpm) > 10, ]
# Get distance-to-median metric
dm.corr.list[["Vehicle_0_topdm"]] <- dm_analysis(vehicle.rpm, top.n)
# Get correlation metric
dm.corr.list[["Vehicle_0_corr"]] <- correlation_analysis(vehicle.rpm,
dm.corr.list[["Vehicle_0_topdm"]])
# Repeat for product
for (i in 1:length(d)) {
sample.cells <- filt.col.data[grep(product, filt.col.data$product_name), ] %>%
filter(cell_type == cell.type, dose == d[i]) %>%
rownames()
sample.counts <- filt.counts[, sample.cells]
# RPM normalisation
sample.rpm <- sample.counts / (colSums(sample.counts) / 10^6)
sample.rpm <- sample.rpm[rowMeans(sample.rpm) > 10, ]
# Get distance-to-median metric
dm.corr.list[[paste0(product, "_", d[i], "_topdm")]] <- dm_analysis(sample.rpm, top.n)
# Get correlation metric
dm.corr.list[[paste0(product, "_", d[i], "_corr")]] <- correlation_analysis(sample.rpm,
dm.corr.list[[paste0(product, "_", d[i], "_topdm")]])
}
# Plot violin plot
png(glue("./processed/GSE139944/transcriptional_noise/sciPlex3_DM_{cell.type}_{product}.png"),
width=3000, height=2000, res=300)
vioplot(dcorr(dm.corr.list[["Vehicle_0_corr"]]),
dcorr(dm.corr.list[[paste0(product, "_10_corr")]]),
dcorr(dm.corr.list[[paste0(product, "_100_corr")]]),
dcorr(dm.corr.list[[paste0(product, "_1000_corr")]]),
dcorr(dm.corr.list[[paste0(product, "_10000_corr")]]),
names=c("Vehicle_0",
paste0(product, "_10"),
paste0(product, "_100"),
paste0(product, "_1000"),
paste0(product, "_10000")),
col="orange")
title(main=glue("{cell.type} transcriptional heterogeneity in {product} treatments
for the top N={top.n} highly variable genes"),
ylab="Pairwise distance measure")
dev.off()
